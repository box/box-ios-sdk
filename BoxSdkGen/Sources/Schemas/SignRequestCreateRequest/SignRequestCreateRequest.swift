import Foundation

/// Creates a Box Sign request object.
public class SignRequestCreateRequest: SignRequestBase {
    private enum CodingKeys: String, CodingKey {
        case signers
        case sourceFiles = "source_files"
        case signatureColor = "signature_color"
        case parentFolder = "parent_folder"
    }

    /// Array of signers for the signature request. 35 is the
    /// max number of signers permitted.
    /// 
    /// **Note**: It may happen that some signers belong to conflicting [segments](r://shield-information-barrier-segment-member) (user groups).
    /// This means that due to the security policies, users are assigned to segments to prevent exchanges or communication that could lead to ethical conflicts.
    /// In such a case, an attempt to send the sign request will result in an error.
    /// 
    /// Read more about [segments and ethical walls](https://support.box.com/hc/en-us/articles/9920431507603-Understanding-Information-Barriers#h_01GFVJEHQA06N7XEZ4GCZ9GFAQ).
    public let signers: [SignRequestCreateSigner]

    /// List of files to create a signing document from. This is currently limited to ten files. Only the ID and type fields are required for each file.
    @CodableTriState public private(set) var sourceFiles: [FileBase]?

    /// Force a specific color for the signature (blue, black, or red)
    @CodableTriState public private(set) var signatureColor: SignRequestCreateRequestSignatureColorField?

    public let parentFolder: FolderMini?

    /// Initializer for a SignRequestCreateRequest.
    ///
    /// - Parameters:
    ///   - signers: Array of signers for the signature request. 35 is the
    ///     max number of signers permitted.
    ///     
    ///     **Note**: It may happen that some signers belong to conflicting [segments](r://shield-information-barrier-segment-member) (user groups).
    ///     This means that due to the security policies, users are assigned to segments to prevent exchanges or communication that could lead to ethical conflicts.
    ///     In such a case, an attempt to send the sign request will result in an error.
    ///     
    ///     Read more about [segments and ethical walls](https://support.box.com/hc/en-us/articles/9920431507603-Understanding-Information-Barriers#h_01GFVJEHQA06N7XEZ4GCZ9GFAQ).
    ///   - isDocumentPreparationNeeded: Indicates if the sender should receive a `prepare_url` in the response to complete document preparation using the UI.
    ///   - redirectUrl: When specified, the signature request will be redirected to this url when a document is signed.
    ///   - declinedRedirectUrl: The uri that a signer will be redirected to after declining to sign a document.
    ///   - areTextSignaturesEnabled: Disables the usage of signatures generated by typing (text).
    ///   - emailSubject: Subject of sign request email. This is cleaned by sign request. If this field is not passed, a default subject will be used.
    ///   - emailMessage: Message to include in sign request email. The field is cleaned through sanitization of specific characters. However, some html tags are allowed. Links included in the message are also converted to hyperlinks in the email. The message may contain the following html tags including `a`, `abbr`, `acronym`, `b`, `blockquote`, `code`, `em`, `i`, `ul`, `li`, `ol`, and `strong`. Be aware that when the text to html ratio is too high, the email may end up in spam filters. Custom styles on these tags are not allowed. If this field is not passed, a default message will be used.
    ///   - areRemindersEnabled: Reminds signers to sign a document on day 3, 8, 13 and 18. Reminders are only sent to outstanding signers.
    ///   - name: Name of the signature request.
    ///   - prefillTags: When a document contains sign-related tags in the content, you can prefill them using this `prefill_tags` by referencing the 'id' of the tag as the `external_id` field of the prefill tag.
    ///   - daysValid: Set the number of days after which the created signature request will automatically expire if not completed. By default, we do not apply any expiration date on signature requests, and the signature request does not expire.
    ///   - externalId: This can be used to reference an ID in an external system that the sign request is related to.
    ///   - templateId: When a signature request is created from a template this field will indicate the id of that template.
    ///   - externalSystemName: Used as an optional system name to appear in the signature log next to the signers who have been assigned the `embed_url_external_id`.
    ///   - sourceFiles: List of files to create a signing document from. This is currently limited to ten files. Only the ID and type fields are required for each file.
    ///   - signatureColor: Force a specific color for the signature (blue, black, or red)
    ///   - parentFolder: 
    public init(signers: [SignRequestCreateSigner], isDocumentPreparationNeeded: Bool? = nil, redirectUrl: TriStateField<String> = nil, declinedRedirectUrl: TriStateField<String> = nil, areTextSignaturesEnabled: Bool? = nil, emailSubject: TriStateField<String> = nil, emailMessage: TriStateField<String> = nil, areRemindersEnabled: Bool? = nil, name: String? = nil, prefillTags: [SignRequestPrefillTag]? = nil, daysValid: TriStateField<Int64> = nil, externalId: TriStateField<String> = nil, templateId: TriStateField<String> = nil, externalSystemName: TriStateField<String> = nil, sourceFiles: TriStateField<[FileBase]> = nil, signatureColor: TriStateField<SignRequestCreateRequestSignatureColorField> = nil, parentFolder: FolderMini? = nil) {
        self.signers = signers
        self._sourceFiles = CodableTriState(state: sourceFiles)
        self._signatureColor = CodableTriState(state: signatureColor)
        self.parentFolder = parentFolder

        super.init(isDocumentPreparationNeeded: isDocumentPreparationNeeded, redirectUrl: redirectUrl, declinedRedirectUrl: declinedRedirectUrl, areTextSignaturesEnabled: areTextSignaturesEnabled, emailSubject: emailSubject, emailMessage: emailMessage, areRemindersEnabled: areRemindersEnabled, name: name, prefillTags: prefillTags, daysValid: daysValid, externalId: externalId, templateId: templateId, externalSystemName: externalSystemName)
    }

    required public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        signers = try container.decode([SignRequestCreateSigner].self, forKey: .signers)
        sourceFiles = try container.decodeIfPresent([FileBase].self, forKey: .sourceFiles)
        signatureColor = try container.decodeIfPresent(SignRequestCreateRequestSignatureColorField.self, forKey: .signatureColor)
        parentFolder = try container.decodeIfPresent(FolderMini.self, forKey: .parentFolder)

        try super.init(from: decoder)
    }

    public override func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(signers, forKey: .signers)
        try container.encode(field: _sourceFiles.state, forKey: .sourceFiles)
        try container.encode(field: _signatureColor.state, forKey: .signatureColor)
        try container.encodeIfPresent(parentFolder, forKey: .parentFolder)
        try super.encode(to: encoder)
    }

}
