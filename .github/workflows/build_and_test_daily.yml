name: build-and-test
on:
  schedule:
    - cron: "20 22 * * 1-5"
jobs:
  ios:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.runsOn }}
    strategy:
      matrix:
        include:
          - destination: 'platform=iOS Simulator,OS=18.5,name=iPhone 16 Pro'
            name: 'xcodebuild (iOS 18.5)'
            xcode: 'Xcode_16.4'
            runsOn: macOS-15
            platform: iOS
    env:
      DEVELOPER_DIR: '/Applications/${{ matrix.xcode }}.app/Contents/Developer'
      CLIENT_ID: ${{ secrets.CLIENT_ID }}
      CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
      USER_ID: ${{ secrets.USER_ID }}
      ENTERPRISE_ID: ${{ secrets.ENTERPRISE_ID }}
      BOX_FILE_REQUEST_ID: ${{ secrets.BOX_FILE_REQUEST_ID }}
      BOX_EXTERNAL_USER_EMAIL: ${{ secrets.BOX_EXTERNAL_USER_EMAIL }}
      BOX_EXTERNAL_USER_ID: ${{ secrets.BOX_EXTERNAL_USER_ID }}
      WORKFLOW_FOLDER_ID: ${{ secrets.WORKFLOW_FOLDER_ID }}
      APP_ITEM_ASSOCIATION_FILE_ID: ${{ secrets.APP_ITEM_ASSOCIATION_FILE_ID }}
      APP_ITEM_ASSOCIATION_FOLDER_ID: ${{ secrets.APP_ITEM_ASSOCIATION_FOLDER_ID }}
      APP_ITEM_SHARED_LINK: ${{ secrets.APP_ITEM_SHARED_LINK }}
      SLACK_AUTOMATION_USER_ID: ${{ secrets.SLACK_AUTOMATION_USER_ID }}
      SLACK_ORG_ID: ${{ secrets.SLACK_ORG_ID }}
      SLACK_PARTNER_ITEM_ID: ${{ secrets.SLACK_PARTNER_ITEM_ID }}
      ADMIN_USER_ID: ${{ secrets.ADMIN_USER_ID }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: sdk-gen
      - name: Install dependencies
        working-directory: ./BoxSdkGen
        run: |
          gem install xcpretty
          gem install slather
      - name: Inject environment variables into .xctestplan
        working-directory: ./BoxSdkGen
        run: |
          XCTESTPLAN_PATH="Tests/BoxSdkGenTests_${{ matrix.platform }}.xctestplan"
          ENV_JSON=$(jq -n '[
            {key: "CLIENT_ID", value: env.CLIENT_ID},
            {key: "CLIENT_SECRET", value: env.CLIENT_SECRET},
            {key: "USER_ID", value: env.USER_ID},
            {key: "ENTERPRISE_ID", value: env.ENTERPRISE_ID},
            {key: "BOX_FILE_REQUEST_ID", value: env.BOX_FILE_REQUEST_ID},
            {key: "BOX_EXTERNAL_USER_EMAIL", value: env.BOX_EXTERNAL_USER_EMAIL},
            {key: "BOX_EXTERNAL_USER_ID", value: env.BOX_EXTERNAL_USER_ID},
            {key: "WORKFLOW_FOLDER_ID", value: env.WORKFLOW_FOLDER_ID},
            {key: "APP_ITEM_ASSOCIATION_FILE_ID", value: env.APP_ITEM_ASSOCIATION_FILE_ID},
            {key: "APP_ITEM_ASSOCIATION_FOLDER_ID", value: env.APP_ITEM_ASSOCIATION_FOLDER_ID},
            {key: "APP_ITEM_SHARED_LINK", value: env.APP_ITEM_SHARED_LINK},
            {key: "SLACK_AUTOMATION_USER_ID", value: env.SLACK_AUTOMATION_USER_ID},
            {key: "SLACK_ORG_ID", value: env.SLACK_ORG_ID},
            {key: "SLACK_PARTNER_ITEM_ID", value: env.SLACK_PARTNER_ITEM_ID},
            {key: "ADMIN_USER_ID", value: env.ADMIN_USER_ID}
          ]')

          jq --argjson envVars "$ENV_JSON" \
            '.defaultOptions.environmentVariableEntries = $envVars' \
            "$XCTESTPLAN_PATH" > "${XCTESTPLAN_PATH}.tmp" && mv "${XCTESTPLAN_PATH}.tmp" "$XCTESTPLAN_PATH"

          echo "✅ Environment variables injected into $XCTESTPLAN_PATH"
      
      - name: Run all iOS tests
        working-directory: ./BoxSdkGen
        run: |
          set -o pipefail
          xcodebuild \
            OTHER_SWIFT_FLAGS="-suppress-warnings" \
            -project "BoxSdkGen.xcodeproj" \
            -scheme "BoxSdkGenTests_${{ matrix.platform }}" \
            -destination "${{ matrix.destination }}" \
            -testPlan "BoxSdkGenTests_${{ matrix.platform }}" \
            -enableCodeCoverage YES \
            -derivedDataPath build/DerivedData \
            clean test | xcpretty

      - name: Upload coverage via Slather → Coveralls
        working-directory: ./BoxSdkGen
        env:
          GIT_BRANCH: sdk-gen
          COVERAGE_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: slather

  linux:
    name: ${{ matrix.name }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - image: swift:6.0-jammy
            name: 'SPM (Swift 6.0, Ubuntu 22.04)'
    container:
      image: ${{ matrix.image }}
      env:
        CLIENT_ID: ${{ secrets.CLIENT_ID }}
        CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
        USER_ID: ${{ secrets.USER_ID }}
        ENTERPRISE_ID: ${{ secrets.ENTERPRISE_ID }}
        BOX_FILE_REQUEST_ID: ${{ secrets.BOX_FILE_REQUEST_ID }}
        BOX_EXTERNAL_USER_EMAIL: ${{ secrets.BOX_EXTERNAL_USER_EMAIL }}
        BOX_EXTERNAL_USER_ID: ${{ secrets.BOX_EXTERNAL_USER_ID }}
        WORKFLOW_FOLDER_ID: ${{ secrets.WORKFLOW_FOLDER_ID }}
        APP_ITEM_ASSOCIATION_FILE_ID: ${{ secrets.APP_ITEM_ASSOCIATION_FILE_ID }}
        APP_ITEM_ASSOCIATION_FOLDER_ID: ${{ secrets.APP_ITEM_ASSOCIATION_FOLDER_ID }}
        APP_ITEM_SHARED_LINK: ${{ secrets.APP_ITEM_SHARED_LINK }}
        SLACK_AUTOMATION_USER_ID: ${{ secrets.SLACK_AUTOMATION_USER_ID }}
        SLACK_ORG_ID: ${{ secrets.SLACK_ORG_ID }}
        SLACK_PARTNER_ITEM_ID: ${{ secrets.SLACK_PARTNER_ITEM_ID }}
        ADMIN_USER_ID: ${{ secrets.ADMIN_USER_ID }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: sdk-gen
      - name: Display Swift version
        run: swift --version
      - name: Run All Swift tests
        working-directory: BoxSdkGen
        run: swift test -Xswiftc -suppress-warnings
  
  notify:
    name: Send Slack Notification
    runs-on: ubuntu-latest
    needs: [ios, linux]
    if: always()
    steps:
      - name: Send Slack Notification
        env:
          SLACK_WEBHOOK_TEST_NOTIFICATION_URL: ${{ secrets.SLACK_WEBHOOK_TEST_NOTIFICATION_URL }}
          BUILD_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          if [ "${{ needs.ios.result }}" != "success" ] || [ "${{ needs.linux.result }}" != "success" ]; then
            STATUS="Failure ❌"
          else
            STATUS="Success ✅"
          fi

          curl -X POST -H "Content-Type: application/json" \
            --data "{\"text\":\"<${BUILD_URL}|Daily Tests Job> in *${GITHUB_REPOSITORY}* finished with status: ${STATUS}\"}" \
            "$SLACK_WEBHOOK_TEST_NOTIFICATION_URL"